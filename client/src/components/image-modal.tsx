import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { X, Download, ExternalLink } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState } from "react";

interface ImageModalProps {
  imageUrl: string;
  modelName?: string;
  children: React.ReactNode;
  generation?: any;
}

export default function ImageModal({ imageUrl, modelName, children, generation }: ImageModalProps) {
  const [isOpen, setIsOpen] = useState(false);

  const handleDownload = async () => {
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${modelName || 'generated'}-${Date.now()}.jpg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading image:', error);
    }
  };

  const handleOpenInNewTab = () => {
    window.open(imageUrl, '_blank');
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <div className="cursor-pointer hover:opacity-90 transition-opacity">
          {children}
        </div>
      </DialogTrigger>
      <DialogContent className="max-w-none w-screen h-screen p-0 bg-black/95 border-none">
        {/* Header with controls */}
        <div className="absolute top-4 right-4 z-50 flex items-center gap-2">
          {modelName && (
            <div className="bg-black/50 text-white px-3 py-1 rounded-md text-sm">
              {modelName}
            </div>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleDownload}
            className="bg-black/50 text-white hover:bg-black/70"
            data-testid="button-download-image"
          >
            <Download className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleOpenInNewTab}
            className="bg-black/50 text-white hover:bg-black/70"
            data-testid="button-open-new-tab"
          >
            <ExternalLink className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsOpen(false)}
            className="bg-black/50 text-white hover:bg-black/70"
            data-testid="button-close-modal"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        {/* Image container */}
        <div className="w-full h-full flex items-center justify-center p-8">
          <img
            src={imageUrl}
            alt={`Generated by ${modelName || 'AI'}`}
            className="max-w-full max-h-full object-contain"
            data-testid="img-modal-fullscreen"
          />
        </div>

        {/* Bottom info bar */}
        {generation && (
          <div className="absolute bottom-4 left-4 right-4 z-50">
            <div className="bg-black/50 text-white px-4 py-2 rounded-md text-sm flex items-center justify-between">
              <div className="flex items-center gap-4">
                <span>Model: {modelName}</span>
                {generation.styleStrength && (
                  <span>Style: {(generation.styleStrength * 100).toFixed(0)}%</span>
                )}
                {generation.width && generation.height && (
                  <span>Rozměry: {generation.width}×{generation.height}</span>
                )}
              </div>
              <div className="text-xs text-gray-300">
                {generation.createdAt && new Date(generation.createdAt).toLocaleString('cs-CZ')}
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}