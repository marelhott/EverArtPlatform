import requests
import os
import sys
import time

try:
    from termcolor import cprint, colored
except ImportError:
    def cprint(msg, color=None, **kwargs): print(msg)
    def colored(msg, color=None, **kwargs): return msg

EVERART_API_KEY = "everart-TV≈ÆJ-API-KL√çƒå"  # <- vlo≈æ sem sv≈Øj kl√≠ƒç
BASE_URL = "https://api.everart.ai/v1"
THUMBNAIL_DIR = "thumbnails"

if not os.path.exists(THUMBNAIL_DIR):
    os.makedirs(THUMBNAIL_DIR)

session = requests.Session()
session.headers.update({
    "Authorization": f"Bearer {EVERART_API_KEY}",
    "Accept": "application/json",
    "Content-Type": "application/json"
})

def get_models():
    url = f"{BASE_URL}/models"
    r = session.get(url)
    if r.status_code != 200:
        cprint(f"‚ùå Nelze naƒç√≠st modely: {r.text}", "red")
        return []
    return r.json().get("models", [])

def print_models(models):
    if not models:
        cprint("≈Ω√°dn√© modely nebyly nalezeny.", "yellow")
        return
    cprint(f"\nNalezeno {len(models)} model≈Ø:", "cyan")
    for idx, m in enumerate(models, 1):
        status = m["status"]
        color = "green" if status == "READY" else "yellow" if status == "TRAINING" else "red"
        print(f"\n{idx}. N√°zev: {colored(m['name'], 'cyan')}")
        print(f"   ID: {m['id']}")
        print(f"   Status: {colored(status, color)}")
        thumb = m.get("thumbnail_url")
        if thumb:
            ext = thumb.split(".")[-1].split("?")[0][:4]
            fname = os.path.join(THUMBNAIL_DIR, f"{m['id']}.{ext}")
            if not os.path.isfile(fname):
                try:
                    img = session.get(thumb)
                    with open(fname, "wb") as f:
                        f.write(img.content)
                    print(f"   N√°hled ulo≈æen jako: {fname}")
                except Exception as e:
                    cprint(f"   (Chyba stahov√°n√≠ n√°hledu: {e})", "red")
            else:
                print(f"   N√°hled ulo≈æen jako: {fname}")
        else:
            cprint("   N√°hled nen√≠ k dispozici.", "yellow")

def upload_images(image_paths):
    cprint("‚è´ Nahr√°v√°m obr√°zky...", "cyan")
    tokens = []
    for path in image_paths:
        if not os.path.isfile(path):
            cprint(f"Soubor {path} neexistuje!", "red")
            continue
        filename = os.path.basename(path)
        ext = filename.split('.')[-1].lower()
        content_type = "image/jpeg" if ext in ["jpg", "jpeg"] else "image/png"
        req_json = {"images": [{"filename": filename, "content_type": content_type}]}
        r = session.post(f"{BASE_URL}/images/uploads", json=req_json)
        if r.status_code != 200:
            cprint(f"‚ùå Nelze z√≠skat upload URL pro {filename}: {r.text}", "red")
            continue
        u = r.json()["image_uploads"][0]
        with open(path, "rb") as f:
            put_headers = {"Content-Type": content_type}
            put_resp = requests.put(u["upload_url"], data=f, headers=put_headers)
            if put_resp.status_code not in [200, 201]:
                cprint(f"‚ùå Upload {filename} selhal: {put_resp.text}", "red")
                continue
            tokens.append(u["upload_token"])
            cprint(f"‚úÖ {filename} nahr√°n (upload_token={u['upload_token']})", "green")
    return tokens

def create_model(name, subject, images):
    cprint(f"\nüÜï Zakl√°d√°m model '{name}' z {len(images)} obr√°zk≈Ø...", "cyan")
    tokens = upload_images(images)
    if not tokens:
        cprint("‚ùå ≈Ω√°dn√© obr√°zky nebyly √∫spƒõ≈°nƒõ nahr√°ny.", "red")
        return None
    req_json = {"name": name, "subject": subject, "image_upload_tokens": tokens}
    r = session.post(f"{BASE_URL}/models", json=req_json)
    if r.status_code != 200:
        cprint(f"‚ùå Model se nepoda≈ôilo zalo≈æit: {r.text}", "red")
        return None
    model = r.json()["model"]
    cprint(f"‚úÖ Nov√Ω model '{model['name']}' vytvo≈ôen! ID: {model['id']}", "green")
    wait_for_ready(model["id"])
    return model

def wait_for_ready(model_id, timeout=900, interval=15):
    t = 0
    cprint(f"‚è≥ ƒåek√°m na dokonƒçen√≠ tr√©nov√°n√≠ modelu {model_id}...", "yellow")
    while t < timeout:
        url = f"{BASE_URL}/models/{model_id}"
        r = session.get(url)
        status = r.json().get("model", {}).get("status")
        if status == "READY":
            cprint("‚úÖ Model je READY!", "green")
            return
        elif status in ("FAILED", "CANCELED"):
            cprint(f"‚ùå Model skonƒçil se stavem {status}", "red")
            return
        else:
            print(f"Status: {status} ({t}s/{timeout}s)")
            time.sleep(interval)
            t += interval
    cprint("‚ùå Timeout p≈ôi ƒçek√°n√≠ na model.", "red")

def apply_model(model_id, input_image, out_path="result.jpg", style_strength=0.6, width=512, height=512):
    cprint(f"\n‚ú® Aplikuji model {model_id} na obr√°zek {input_image}...", "cyan")
    tokens = upload_images([input_image])
    if not tokens:
        cprint("‚ùå Obr√°zek nebyl nahr√°n, konƒç√≠m.", "red")
        return
    req_json = {
        "prompt": " ",
        "type": "img2img",
        "model_id": model_id,
        "image_count": 1,
        "width": width,
        "height": height,
        "style_strength": style_strength,
        "image_upload_token": tokens[0]
    }
    r = session.post(f"{BASE_URL}/models/{model_id}/generations", json=req_json)
    if r.status_code != 200:
        cprint(f"‚ùå Generov√°n√≠ selhalo: {r.text}", "red")
        return
    generations = r.json().get("generations", [])
    if not generations:
        cprint("‚ùå EverArt negenerovalo ≈æ√°dn√Ω v√Ωsledek.", "red")
        return
    img_url = generations[0].get("image_url")
    cprint(f"‚úÖ V√Ωsledek: {img_url}", "green")
    img = requests.get(img_url)
    with open(out_path, "wb") as f:
        f.write(img.content)
    cprint(f"‚úÖ V√Ωsledek ulo≈æen jako {out_path}", "green")

def main():
    while True:
        print("\n=== EverArt CLI ===")
        print("1) Vypsat v≈°echny modely")
        print("2) Vytvo≈ôit nov√Ω model")
        print("3) Pou≈æ√≠t model na obr√°zek (styl transfer)")
        print("4) Konec")
        choice = input("Zvol mo≈ænost (1-4): ").strip()
        if choice == "1":
            print_models(get_models())
        elif choice == "2":
            name = input("N√°zev nov√©ho modelu: ").strip()
            subject = input("Typ modelu ('STYLE', 'PERSON', 'OBJECT'): ").strip().upper()
            images = input("Cesty k obr√°zk≈Øm pro tr√©nink (oddƒõlen√© ƒç√°rkou): ").strip().split(",")
            images = [i.strip() for i in images if i.strip()]
            create_model(name, subject, images)
        elif choice == "3":
            model_id = input("ID modelu: ").strip()
            img_path = input("Cesta ke vstupn√≠mu obr√°zku: ").strip()
            out = input("V√Ωsledn√Ω soubor (enter pro 'result.jpg'): ").strip() or "result.jpg"
            strength = input("S√≠la stylu (0.0‚Äì1.0, v√Ωchoz√≠ 0.6): ").strip()
            try: strength = float(strength) if strength else 0.6
            except: strength = 0.6
            w = input("≈†√≠≈ôka (v√Ωchoz√≠ 512): ").strip()
            h = input("V√Ω≈°ka (v√Ωchoz√≠ 512): ").strip()
            try: w = int(w) if w else 512; h = int(h) if h else 512
            except: w = h = 512
            apply_model(model_id, img_path, out, strength, w, h)
        elif choice == "4":
            print("Ukonƒçuji.")
            break
        else:
            cprint("Neplatn√° volba.", "red")

if __name__ == "__main__":
    main()